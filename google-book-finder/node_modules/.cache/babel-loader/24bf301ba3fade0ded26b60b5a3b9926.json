{"ast":null,"code":"var _jsxFileName = \"/Users/jingchen/Documents/CS_Learning/ChinguProjects/BookFinder/google-book-finder/src/SearchBar.js\";\nimport React from 'react';\nimport BookCardContainer from './BookCardContainer'; //material ui component\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\nimport Grid from \"@material-ui/core/Grid\";\n\nconst styles = theme => ({\n  button: {\n    margin: \"100 px auto\"\n  },\n  input: {\n    display: 'none'\n  },\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  textField: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    flexBasis: 200,\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  menu: {\n    width: 200\n  }\n});\n\nclass SearchBar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      booksData: [],\n      totalItems: \"\",\n      query: \"\",\n      isLoading: false,\n      totalPages: 0,\n      currentPageNo: 0\n    };\n\n    this.fetchData = () => {\n      //My unique API key, no authentication needed. \n      //This key is only allowed for Google Books API.\n      const ApiKey = 'AIzaSyAXJai7q64-kw03ojn8H2XVm8AOoTiUrqM';\n      let query = this.state.query.split(\" \").join(\"+\"); //for the use of pagination\n\n      let startIndex = 0;\n      let maxResults = 20; //max allowed results in api\n      //TODO: each new page, run fetchData() again, change startIndex=maxResults+1\n\n      let booksURL = \"https://www.googleapis.com/books/v1/volumes?q=\".concat(query, \"&startIndex=\").concat(startIndex, \"&maxResults=\").concat(maxResults, \"&key=\").concat(ApiKey, \"&max-result=40\");\n\n      async function getData() {\n        try {\n          const response = await fetch(booksURL); // console.log(response)\n\n          if (!response.ok) {\n            throw new Error('Network response was not ok.');\n          } else {\n            let data = await response.json();\n            return data;\n          }\n        } catch (error) {\n          console.log('There has been a problem with your fetch operation: ', error.message);\n        }\n      }\n\n      getData().then(data => {\n        //convert into number, get total number of search results\n        const totalResults = Number(data.totalItems);\n        const totalPagesCount = this.getPagesCount(totalResults, 20);\n        this.setState({\n          //send books information to state\n          booksData: data.items,\n          totalItems: totalResults,\n          isLoading: false,\n          totalPages: totalPagesCount\n        }); // console.log(totalPagesCount)\n      });\n    };\n\n    this.getPagesCount = (total, denominator) => {\n      const divisible = total % denominator === 0;\n      const valueToBeAdded = divisible ? 0 : 1;\n      return Math.floor(total / denominator) + valueToBeAdded;\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        [name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault(); //If query is not an empty string, then fetch data\n\n      if (this.state.query !== \"\") {\n        this.setState({\n          isLoading: true\n        });\n        this.fetchData();\n      }\n    };\n  }\n\n  render() {\n    const classes = this.props.classes;\n    let notice; //Edge case:\n\n    if (this.state.isLoading) {\n      notice = React.createElement(Typography, {\n        variant: \"h3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Searching...\");\n    } else {\n      //If it returns 0 search result\n      if (this.state.totalItems === 0) {\n        notice = React.createElement(Typography, {\n          variant: \"h3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, \"No books found.\");\n      } else if (this.state.totalItems !== \"\" || 0) {\n        notice = React.createElement(Typography, {\n          variant: \"h5\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, this.state.totalItems, \" results. Displaying the first 20 results.\");\n      }\n    }\n\n    return React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"center\",\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: classes.container,\n      noValidate: true,\n      autoComplete: \"off\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      id: \"search\",\n      label: \"Search for a book...\",\n      className: classes.textField,\n      value: this.state.query,\n      onChange: this.handleChange(\"query\"),\n      margin: \"normal\",\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      size: \"medium\",\n      color: \"primary\",\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Search\"))), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, notice), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, //Edge case: if no book data\n    this.state.totalItems !== 0 && !this.state.isLoading ? React.createElement(BookCardContainer, {\n      books: this.state.booksData,\n      totalItems: this.state.totalItems,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }) : \"\"), React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, this.state.totalPages >= 1 ? //TODO: add page button\n    React.createElement(Button, {\n      variant: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Page 1\") : \"\"));\n  }\n\n}\n\nSearchBar.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(SearchBar);","map":{"version":3,"sources":["/Users/jingchen/Documents/CS_Learning/ChinguProjects/BookFinder/google-book-finder/src/SearchBar.js"],"names":["React","BookCardContainer","PropTypes","withStyles","Button","TextField","Typography","Grid","styles","theme","button","margin","input","display","container","flexWrap","textField","marginLeft","spacing","marginRight","flexBasis","menu","width","SearchBar","Component","state","booksData","totalItems","query","isLoading","totalPages","currentPageNo","fetchData","ApiKey","split","join","startIndex","maxResults","booksURL","getData","response","fetch","ok","Error","data","json","error","console","log","message","then","totalResults","Number","totalPagesCount","getPagesCount","setState","items","total","denominator","divisible","valueToBeAdded","Math","floor","handleChange","name","event","target","value","handleSubmit","e","preventDefault","render","classes","props","notice","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport BookCardContainer from './BookCardContainer';\n//material ui component\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\nimport Grid from \"@material-ui/core/Grid\";\n\n\nconst styles = theme => ({\n    button: {\n        margin: `100 px auto`,\n    },\n    input: {\n        display: 'none',\n    },\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    textField: {\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        flexBasis: 200,\n        display: \"flex\",\n        flexWrap: \"wrap\"\n    },\n    menu: {\n        width: 200,\n    },\n});\n\nclass SearchBar extends React.Component {\n\n    state = {\n        booksData: [],\n        totalItems: \"\",\n        query: \"\",\n        isLoading: false,\n        totalPages: 0,\n        currentPageNo: 0\n    }\n\n    //fetch google books data when submitting search form\n    fetchData = () => {\n        //My unique API key, no authentication needed. \n        //This key is only allowed for Google Books API.\n        const ApiKey = 'AIzaSyAXJai7q64-kw03ojn8H2XVm8AOoTiUrqM';\n        let query = this.state.query.split(\" \").join(\"+\");\n        //for the use of pagination\n        let startIndex = 0\n        let maxResults = 20; //max allowed results in api\n        //TODO: each new page, run fetchData() again, change startIndex=maxResults+1\n        let booksURL = `https://www.googleapis.com/books/v1/volumes?q=${query}&startIndex=${startIndex}&maxResults=${maxResults}&key=${ApiKey}&max-result=40`;\n        async function getData() {\n            try {\n                const response = await fetch(booksURL);\n                // console.log(response)\n                if (!response.ok) {\n                    throw new Error('Network response was not ok.');\n                } else {\n                    let data = await response.json()\n                    return data;\n                }\n            } catch (error) {\n                console.log('There has been a problem with your fetch operation: ', error.message);\n            }\n        }\n        getData()\n            .then(data => {\n                //convert into number, get total number of search results\n                const totalResults = Number(data.totalItems)\n                const totalPagesCount = this.getPagesCount(totalResults, 20)\n                this.setState({\n                    //send books information to state\n                    booksData: data.items,\n                    totalItems: totalResults,\n                    isLoading: false,\n                    totalPages: totalPagesCount,\n                })\n                // console.log(totalPagesCount)\n            })\n    }\n\n    //To display all results, need to get page count first\n    getPagesCount = (total, denominator) => {\n        const divisible = total % denominator === 0;\n        const valueToBeAdded = divisible ? 0 : 1;\n        return Math.floor(total / denominator) + valueToBeAdded;\n    }\n\n    handleChange = name => event => {\n        this.setState({\n            [name]: event.target.value\n        })\n    }\n\n    handleSubmit = e => {\n        e.preventDefault()\n        //If query is not an empty string, then fetch data\n        if (this.state.query !== \"\") {\n            this.setState({ isLoading: true })\n            this.fetchData()\n        }\n    }\n\n    render() {\n        const { classes } = this.props;\n        let notice;\n        //Edge case:\n        if (this.state.isLoading) {\n            notice = <Typography variant=\"h3\">Searching...</Typography>\n        } else {\n            //If it returns 0 search result\n            if (this.state.totalItems === 0) {\n                notice = <Typography variant=\"h3\">No books found.</Typography>\n            } else if (this.state.totalItems !== \"\" || 0) {\n                notice = <Typography variant=\"h5\">{this.state.totalItems} results. Displaying the first 20 results.</Typography>\n            }\n        }\n\n        return (\n            <Grid container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\">\n                <Grid item xs={6}>\n                    <form className={classes.container} noValidate autoComplete=\"off\" onSubmit={this.handleSubmit}>\n                        <TextField\n                            id=\"search\"\n                            label=\"Search for a book...\"\n                            className={classes.textField}\n                            value={this.state.query}\n                            onChange={this.handleChange(\"query\")}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                        />\n                        <br></br>\n                        <Button type=\"submit\" variant=\"contained\" size=\"medium\" color=\"primary\" className={classes.button}>\n                            Search\n                    </Button>\n                    </form>\n                </Grid>\n                <p>\n                    {notice}\n                </p>\n                <div>\n                    {\n                        //Edge case: if no book data\n                        (this.state.totalItems !== 0 && !this.state.isLoading) ?\n                            <BookCardContainer books={this.state.booksData} totalItems={this.state.totalItems} />\n                            :\n                            \"\"\n                    }\n\n                </div>\n                <Grid item xs={6}>\n                    {\n                        this.state.totalPages >= 1 ?\n                            //TODO: add page button\n                            <Button variant=\"primary\">Page 1</Button>\n                            :\n                            \"\"\n                    }\n                </Grid>\n            </Grid>\n        )\n    }\n\n}\n\nSearchBar.propTypes = {\n    classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(SearchBar);\n"]},"metadata":{},"sourceType":"module"}