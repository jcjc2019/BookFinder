{"version":3,"sources":["not_available.jpg","BookCard.js","BookCardContainer.js","SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BookCard","state","expanded","handleExpanded","setState","classes","this","props","console","log","book","volumeInfo","Grid","item","xs","sm","Card","className","card","CardContent","undefined","imageLinks","src","thumbnail","alt","height","width","NotAvailableImage","Typography","variant","title","authors","publisher","publishedDate","CardActions","disableSpacing","IconButton","onClick","aria-expanded","aria-label","Collapse","in","timeout","unmountOnExit","paragraph","href","infoLink","React","Component","withStyles","theme","root","flexGrow","minWidth","maxWidth","margin","display","flexDirection","justifyContent","bullet","transform","pos","marginBottom","paper","padding","spacing","color","palette","text","secondary","expand","marginLeft","transition","transitions","create","duration","shortest","expandOpen","BookCardContainer","container","books","map","SearchBar","booksData","totalItems","query","isLoading","fetchData","split","join","booksURL","a","fetch","response","ok","Error","json","data","message","getData","then","items","handleChange","name","event","target","value","handleSubmit","e","preventDefault","notice","noValidate","autoComplete","onSubmit","TextField","id","label","textField","onChange","Button","type","size","button","input","flexWrap","marginRight","flexBasis","menu","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b3dd8701.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/not_available.127dca9a.jpg\";","import React from 'react';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport NotAvailableImage from './not_available.jpg';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    card: {\n        minWidth: 400,\n        maxWidth: 400,\n        margin: 16,\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-between\"\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    paper: {\n        padding: theme.spacing(2),\n        color: theme.palette.text.secondary,\n    },\n    expand: {\n        transform: 'rotate(0deg)',\n        marginLeft: 'auto',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: 'rotate(180deg)',\n    },\n});\n\nclass BookCard extends React.Component {\n\n    state = {\n        expanded: false\n    }\n\n    handleExpanded = () => {\n        this.setState({\n            expanded: !this.state.expanded\n        })\n    }\n\n    render() {\n        const { classes } = this.props;\n        console.log(this.props.book.volumeInfo)\n        return (\n            <div>\n                <Grid item xs={6} sm={3}>\n                    <Card className={classes.card}>\n                        <CardContent>\n\n                            {this.props.book.volumeInfo.imageLinks !== undefined ?\n                                <img src={this.props.book.volumeInfo.imageLinks.thumbnail} alt=\"cover\" height=\"200px\" width=\"150px\"></img>\n                                :\n                                <img src={NotAvailableImage} alt=\"cover\" height=\"200px\" width=\"150px\"></img>\n                            }\n\n                            <Typography variant=\"h6\">Title: {this.props.book.volumeInfo.title}</Typography>\n                            <Typography variant=\"subtitle1\"></Typography><Typography>Author: {this.props.book.volumeInfo.authors !== undefined ? this.props.book.volumeInfo.authors : \"Unknown\"}</Typography>\n                            <Typography>Publisher: {this.props.book.volumeInfo.publisher}</Typography>\n                            <Typography>Published Date: {this.props.book.volumeInfo.publishedDate !== undefined ? this.props.book.volumeInfo.publishedDate : \"Unknown\"}</Typography>\n                        </CardContent>\n                        <CardActions disableSpacing>\n                            <IconButton\n                                onClick={this.handleExpanded}\n                                aria-expanded={this.state.expanded}\n                                aria-label=\"show more\"\n                            >\n                                <ExpandMoreIcon />\n                            </IconButton>\n                        </CardActions>\n                        <Collapse in={this.state.expanded} timeout=\"auto\" unmountOnExit>\n                            <CardContent>\n                                <Typography paragraph>\n                                    <a href={this.props.book.volumeInfo.infoLink}>Learn more</a>\n                                </Typography>\n                            </CardContent>\n                        </Collapse>\n                    </Card>\n                </Grid>\n            </div >\n        )\n    }\n}\n\nBookCard.propTypes = {\n    classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(BookCard);","import React from 'react';\nimport BookCard from './BookCard';\nimport Grid from \"@material-ui/core/Grid\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    }\n});\n\nclass BookCardContainer extends React.Component {\n\n    render() {\n        const { classes } = this.props;\n        console.log(this.props)\n        return (\n            <div className={classes.root}>\n                <Grid container>\n                    {\n                        this.props.books.map(\n                            book => < BookCard book={book} />\n                        )}\n                </Grid>\n            </div>\n        )\n    }\n}\n\nBookCardContainer.propTypes = {\n    classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(BookCardContainer);\n","import React from 'react';\nimport BookCardContainer from './BookCardContainer';\n//material ui component\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\n\n\nconst styles = theme => ({\n    button: {\n        margin: `100 px auto`,\n    },\n    input: {\n        display: 'none',\n    },\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    textField: {\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        flexBasis: 200,\n        display: \"flex\",\n        flexWrap: \"wrap\"\n    },\n    menu: {\n        width: 200,\n    },\n});\n\nclass SearchBar extends React.Component {\n\n    state = {\n        booksData: [],\n        totalItems: \"\",\n        query: \"\",\n        isLoading: false\n    }\n\n    //fetch google books data when submitting search form\n    fetchData = () => {\n        //My unique API key, no authentication needed. \n        //This key is only allowed for Google Books API.\n        const ApiKey = 'AIzaSyAXJai7q64-kw03ojn8H2XVm8AOoTiUrqM';\n        let query = this.state.query.split(\" \").join(\"+\")\n        let booksURL = `https://www.googleapis.com/books/v1/volumes?q=${query}&key=${ApiKey}`;\n        console.log(query)\n        console.log(booksURL)\n        async function getData() {\n            try {\n                const response = await fetch(booksURL);\n                console.log(response)\n                if (!response.ok) {\n                    throw new Error('Network response was not ok.');\n                } else {\n                    let data = await response.json()\n                    return data;\n                }\n            } catch (error) {\n                console.log('There has been a problem with your fetch operation: ', error.message);\n            }\n        }\n        getData()\n            .then(data => {\n                this.setState({\n                    //send books information to state\n                    booksData: data.items,\n                    totalItems: data.totalItems,\n                    isLoading: false\n                })\n            })\n    }\n\n    handleChange = name => event => {\n        this.setState({\n            [name]: event.target.value\n        })\n    }\n\n    handleSubmit = e => {\n        e.preventDefault()\n        //If query is not an empty string, then fetch data\n        if (this.state.query !== \"\") {\n            this.setState({ isLoading: true })\n            this.fetchData()\n            console.log(this.state)\n        }\n    }\n\n    render() {\n        const { classes } = this.props;\n        let notice;\n        //Edge case:\n        if (this.state.isLoading) {\n            notice = <Typography variant=\"h3\">Searching...</Typography>\n        } else {\n            //If it returns 0 search result\n            if (this.state.totalItems === 0) {\n                notice = <Typography variant=\"h3\">No books found.</Typography>\n            } else if (this.state.totalItems !== \"\" || 0) {\n                notice = <Typography variant=\"h4\">{this.state.totalItems} results. Displaying the first 10 results.</Typography>\n            }\n        }\n\n        return (\n            <div>\n                <form className={classes.container} noValidate autoComplete=\"off\" onSubmit={this.handleSubmit}>\n                    <TextField\n                        id=\"search\"\n                        label=\"Search for a book...\"\n                        className={classes.textField}\n                        value={this.state.query}\n                        onChange={this.handleChange(\"query\")}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                    />\n                    <br></br>\n                    <Button type=\"submit\" variant=\"contained\" size=\"medium\" color=\"primary\" className={classes.button}>\n                        Search\n                    </Button>\n                </form>\n                {notice}\n                <div>\n                    {\n                        //Edge case: if no book data\n                        (this.state.totalItems !== 0 && !this.state.isLoading) ?\n                            <BookCardContainer books={this.state.booksData} totalItems={this.state.totalItems} />\n                            :\n                            \"\"\n                    }\n                </div>\n\n            </div>\n        )\n    }\n\n}\n\nSearchBar.propTypes = {\n    classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(SearchBar);\n","import React from 'react';\nimport SearchBar from './SearchBar'\nimport './App.css';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <header><h1>A Simple Book Finder</h1></header>\n        <body>\n          <SearchBar />\n        </body>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}